-- 1. Creating a table
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE employees';
EXCEPTION
    WHEN OTHERS THEN NULL; -- Ignore error if table doesn't exist
END;
/

CREATE TABLE employees (
    emp_id      NUMBER PRIMARY KEY,
    emp_name    VARCHAR2(50),
    emp_salary  NUMBER,
    emp_dept    VARCHAR2(30)
);

-- 2. Inserting records
BEGIN
    INSERT INTO employees VALUES (1, 'Alice', 50000, 'IT');
    INSERT INTO employees VALUES (2, 'Bob', 60000, 'HR');
    INSERT INTO employees VALUES (3, 'Charlie', 55000, 'Finance');
    COMMIT;
END;
/

-- 3. Selecting and printing records using a cursor
DECLARE
    CURSOR emp_cur IS SELECT emp_id, emp_name, emp_salary, emp_dept FROM employees;
    v_id    employees.emp_id%TYPE;
    v_name  employees.emp_name%TYPE;
    v_sal   employees.emp_salary%TYPE;
    v_dept  employees.emp_dept%TYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Employee List ---');
    OPEN emp_cur;
    LOOP
        FETCH emp_cur INTO v_id, v_name, v_sal, v_dept;
        EXIT WHEN emp_cur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID: ' || v_id || ', Name: ' || v_name || ', Salary: ' || v_sal || ', Dept: ' || v_dept);
    END LOOP;
    CLOSE emp_cur;
END;
/

-- 4. Updating a record
BEGIN
    UPDATE employees SET emp_salary = emp_salary + 5000 WHERE emp_id = 1;
    COMMIT;
END;
/

-- 5. Deleting a record
BEGIN
    DELETE FROM employees WHERE emp_id = 3;
    COMMIT;
END;
/

-- 6. Conditional logic (IF THEN ELSE and CASE)
DECLARE
    v_salary employees.emp_salary%TYPE;
BEGIN
    SELECT emp_salary INTO v_salary FROM employees WHERE emp_id = 2;

    IF v_salary > 55000 THEN
        DBMS_OUTPUT.PUT_LINE('High salary');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Average salary');
    END IF;

    CASE 
        WHEN v_salary > 70000 THEN DBMS_OUTPUT.PUT_LINE('Very High');
        WHEN v_salary BETWEEN 50000 AND 70000 THEN DBMS_OUTPUT.PUT_LINE('Moderate');
        ELSE DBMS_OUTPUT.PUT_LINE('Low');
    END CASE;
END;
/

-- 7. Looping example
DECLARE
    i NUMBER := 1;
BEGIN
    WHILE i <= 3 LOOP
        DBMS_OUTPUT.PUT_LINE('Loop iteration: ' || i);
        i := i + 1;
    END LOOP;
END;
/

-- 8. Exception Handling
BEGIN
    DECLARE
        v_name employees.emp_name%TYPE;
    BEGIN
        SELECT emp_name INTO v_name FROM employees WHERE emp_id = 99;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Employee not found.');
    END;
END;
/

-- 9. Stored Procedure
CREATE OR REPLACE PROCEDURE raise_salary(p_id NUMBER, p_amount NUMBER) AS
BEGIN
    UPDATE employees SET emp_salary = emp_salary + p_amount WHERE emp_id = p_id;
    DBMS_OUTPUT.PUT_LINE('Salary updated for employee ID: ' || p_id);
END;
/

-- Call the procedure
BEGIN
    raise_salary(2, 3000);
END;
/

-- 10. Stored Function
CREATE OR REPLACE FUNCTION get_salary(p_id NUMBER) RETURN NUMBER AS
    v_sal employees.emp_salary%TYPE;
BEGIN
    SELECT emp_salary INTO v_sal FROM employees WHERE emp_id = p_id;
    RETURN v_sal;
END;
/

-- Call the function
DECLARE
    v_salary NUMBER;
BEGIN
    v_salary := get_salary(2);
    DBMS_OUTPUT.PUT_LINE('Salary of Employee 2: ' || v_salary);
END;
/

-- 11. Transaction control
BEGIN
    INSERT INTO employees VALUES (4, 'David', 62000, 'Marketing');
    ROLLBACK; -- This insert will not be saved
END;
/

-- Verify rollback
BEGIN
    DECLARE
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_count FROM employees WHERE emp_id = 4;
        DBMS_OUTPUT.PUT_LINE('Count of David: ' || v_count); -- Should be 0
    END;
END;
/


-- Create departments table
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE departments';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

CREATE TABLE departments (
    dept_id    NUMBER PRIMARY KEY,
    dept_name  VARCHAR2(30)
);

-- Insert into departments
BEGIN
    INSERT INTO departments VALUES (1, 'IT');
    INSERT INTO departments VALUES (2, 'HR');
    INSERT INTO departments VALUES (3, 'Finance');
    INSERT INTO departments VALUES (4, 'Marketing');
    COMMIT;
END;
/

-- 🔁 JOIN Example 1: INNER JOIN
BEGIN
    DBMS_OUTPUT.PUT_LINE('--- INNER JOIN: Employees with Matching Departments ---');
    FOR rec IN (
        SELECT e.emp_name, e.emp_salary, d.dept_name
        FROM employees e
        INNER JOIN departments d ON e.emp_dept = d.dept_name
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Name: ' || rec.emp_name || ', Salary: ' || rec.emp_salary || ', Department: ' || rec.dept_name);
    END LOOP;
END;
/

-- 🔁 JOIN Example 2: LEFT OUTER JOIN
BEGIN
    DBMS_OUTPUT.PUT_LINE('--- LEFT JOIN: All Employees, Even Without Matching Departments ---');
    FOR rec IN (
        SELECT e.emp_name, d.dept_name
        FROM employees e
        LEFT JOIN departments d ON e.emp_dept = d.dept_name
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Name: ' || rec.emp_name || ', Department: ' || NVL(rec.dept_name, 'NO DEPT FOUND'));
    END LOOP;
END;
/

-- 🔁 JOIN Example 3: Using Cursor with JOIN
DECLARE
    CURSOR emp_dept_cur IS
        SELECT e.emp_name, d.dept_name
        FROM employees e
        JOIN departments d ON e.emp_dept = d.dept_name;

    v_name  employees.emp_name%TYPE;
    v_dept  departments.dept_name%TYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Cursor JOIN ---');
    OPEN emp_dept_cur;
    LOOP
        FETCH emp_dept_cur INTO v_name, v_dept;
        EXIT WHEN emp_dept_cur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Employee: ' || v_name || ', Department: ' || v_dept);
    END LOOP;
    CLOSE emp_dept_cur;
END;
/
